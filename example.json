Login object
{
  "username": "the user name",
  "password": "the password"
}
Login failure
Response returns a 400,
{
    "non_field_errors": [
        "Unable to log in with provided credentials."
    ]
}


Login success
Response returns a 200 with token

{ "key": “token string” }


Subunit Fasta File objects

For the "Add subunit amino acid FASTA file" upload, POST the following:

{
    "sequence_type": "amino_acid",
    "expected_entry_count": 1,
    "fasta_file": "dna fasta file"
}

For the "Add codon optimized DNA FASTA file" upload, POST the following:

{
    "sequence_type": "dna",
    "expected_entry_count": 1,
    "fasta_file": "amino_acid fasta file"
}

For each individual successful FASTA upload, the following object will be
returned with a 200 (the fasta_entries array will contain one object as shown):

{
  "sequence_type": "sequence type",
  "expected_entry_count": 1,
  "actual_entry_count": 1,
  "fasta_entries": [
    {
      "fasta_description": "Example Fasta Header String",
      "sequence_type": "sequence type",
      "sequence": "ATCGGCTAGCTAGCATCGATCGA"
    }
  ]
}


From these responses, populate the appropriate fields in the "subunits" array in the
"Target" object.

Specifically, the "amino_acid_fasta_description", "amino_acid_sequence",
"dna_fasta_description" and "dna_sequence" fields.

Target object:
{
  "target": "target name",
  "partner": "partner name",
  "protein_class_pk": 1,
  "notes": "notes",
  "project": "project name",
  "subunits": [
    {
      "subunit_name": "subunit1 name",
      "copies": 1,
      "amino_acid_fasta_description": "Subunit 1 AA Fasta Description",
      "amino_acid_sequence": "ASDTQCGHKR",
      "dna_fasta_description": "Subunit 1 DNA Fasta Description",
      "dna_sequence": "ATCGGCTAGCTAGCATCGATCGA"
    },
    {
      "subunit_name": "subunit2 name",
      "copies": 1,
      "amino_acid_fasta_description": "Subunit 2 AA Fasta Description",
      "amino_acid_sequence": "ASDTQCGHKRDTQCGHKR",
      "dna_fasta_description": "Subunit 2 DNA Fasta Description",
      "dna_sequence": "CGCTGCGACGAGCTAGGGCGATCGACGATTCAGG"
    }
  ]
}

Successful target creation object:
{
  "target": "target name",
  "id": 1234,
  "partner": "partner name",
  "protein_class_pk": 3,
  "notes": "notes",
  "project_name": "project name",
  "subunits": [
    {
      "subunit_id": 1,
      "subunit_name": "subunit1 name",
      "copies": 1,
      "amino_acid_fasta_description": "Subunit 1 AA Fasta Description",
      "amino_acid_sequence": "ASDTQCGHKR",
      "dna_fasta_description": "Subunit 1 DNA Fasta Description",
      "dna_sequence": "ATCGGCTAGCTAGCATCGATCGA"
    },
    {
      "subunit_id": 2,
      "subunit_name": "subunit2 name",
      "copies": 1,
      "amino_acid_fasta_description": "Subunit 2 AA Fasta Description",
      "amino_acid_sequence": "ASDTQCGHKRDTQCGHKR",
      "dna_fasta_description": "Subunit 2 DNA Fasta Description",
      "dna_sequence": "CGCTGCGACGAGCTAGGGCGATCGACGATTCAGG"
    }
  ]
}

Protein class
{
  "protein_class": [
    {
      "protein_class_name": "protein class1 name",
      "protein_class_pk": 1
    },
    {
      "protein_class_name": "protein class2 name",
      "protein_class_pk": 2
    },
    {
      "protein_class_name": "protein class3 name",
      "protein_class_pk": 3
    }
  ]
}

Subunit interactions & PTMs route workflow:

Get subunits belonging to the selected target:

GET api/subunits/?target=PK_OF_TARGET

Response:

[
  {
    "subunit_id": 1,
    "subunit_name": "subunit1 name",
    "subunit_sequence": "AGCTHKLM",
    "copies": 3,
    "target": 1,
    "created_at": "2019-07-29T08:35:54.316380-07:00",
    "updated_at": "2019-07-29T08:35:54.316429-07:00",
    "created_by": 1,
    "updated_by": null
  },
  {
    "subunit_id": 2,
    "subunit_name": "subunit2 name",
    "subunit_sequence": "AGCLSSSSH",
    "copies": 2,
    "target": 1,
    "created_at": "2019-07-29T08:35:54.316380-07:00",
    "updated_at": "2019-07-29T08:35:54.316429-07:00",
    "created_by": 1,
    "updated_by": null
  }
]

The "subunit_sequence" field is the sequence in terms of amino acid
residues. One residue is equivalent to one character of the string.
This is the string that's used for the residue logic (max length, adding new PTMs, etc).


As it currently is drafted, the subunit interactions and the post translational
modifications are two separate requests.

Subunit interactions object:

POST api/subunit-interaction/

[
  {
    "subunit_one": subunit_one.subunit_id,
    "subunit_one_copy": 3,
    "subunit_two": subunit_two.subunit_id,
    "subunit_two_copy": 1,
    "interaction": "interaction"
  },
  {
    "subunit_one": subunit_one.subunit_id,
    "subunit_one_copy": 2,
    "subunit_two": subunit_two.subunit_id,
    "subunit_two_copy": 2,
    "interaction": "another interaction"
  }
]

A successful response will return the same data with a 201.

Post translational modification object:

POST api/post-translational-modification/

[
  {
    "subunit_one": subunit_one.subunit_id,
    "subunit_one_residue": 16,
    "subunit_two": subunit_two.subunit_id,
    "subunit_two_residue": 45,
    "ptm": "ptm"
  },
  {
    "subunit_one": subunit_one.subunit_id,
    "subunit_one_residue": 13,
    "subunit_two": subunit_two.subunit_id,
    "subunit_two_residue": 74,
    "ptm": "another ptm"
  }
]

A successful response will return the same data with a 201.
